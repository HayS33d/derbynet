{"name":"DerbyNet","tagline":"Open-source Pinewood Derby race management, built around a web server and database","body":"DerbyNet is an open-source Pinewood Derby race management system based on a standard web server model.\r\n\r\n### Use DerbyNet Alone, or Combine with GrandPrix Race Manager\r\nIt can be used standalone (directly communicating with your electronic timer),\r\nor run alongside and as a supplement to GrandPrix Race Manager\r\n(http://grandprix-software-central.com).\r\n\r\n### DerbyNet Runs on Mac, Linux, and Windows\r\n\r\nThe heart of DerbyNet is implemented as a standards-compliant web server, which you\r\ncan host on nearly any platform (Mac, Linux, or Windows).  We provide step-by-step\r\ndirections for setting up your web server.\r\n\r\nOnce the web server is set up, you can use anything that supports a browser (laptops,\r\ntablets, smart TVs) to connect to the server and display or manipulate (with passwords)\r\nthe data.\r\n\r\n### Use Multiple Clients for a Seamless Event\r\nBeing web server based, DerbyNet lets you run multiple clients (browsers) in\r\nmultiple locations to access the same database.  A typical deployment might have:\r\n\r\n- Volunteers at the check-in desk performing registration an inspection tasks, using\r\nlaptops or tables to update the state of the roster in the database in real time;\r\n\r\n- One or more stations capturing photos of racers and/or race cars;\r\n\r\n- An event dashboard running on the race coordinator's tablet, from which s/he\r\ncan see the overall state of the event, control information displays, generate\r\nracing schedules, and directly control racing by group;\r\n\r\n- A main race display projected onto a large screen showing the entrants in the\r\ncurrent heat and the heat results;\r\n\r\n- Supplemental information displays (\"kiosks\" or digital signage) providing\r\nadditional race details and statistics, updated in real time.\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you're using GitHub for Mac or GitHub for Windows, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}